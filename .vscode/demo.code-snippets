{
  "cache-control": {
    "scope": "javascript,typescript",
    "prefix": ["cache-control"],
    "body": ["res.setHeader(\"Cache-Control\", \"max-age=20\");"]
  },
  "etag": {
    "scope": "javascript,typescript",
    "prefix": ["etag", "e-tag", "md5", "must-revalidate"],
    "body": [
      "const etag = md5(file);",
      "res.setHeader(\"Cache-Control\", \"max-age=0, must-revalidate\");",
      "res.setHeader(\"Etag\", etag);"
    ]
  },
  "if-none-match": {
    "scope": "javascript,typescript",
    "prefix": ["if-none-match", "304"],
    "body": [
      "const ifNoneMatch = req.headers[\"if-none-match\"];",
      "if (ifNoneMatch === etag) {",
      "  res.statusCode = 304;",
      "  res.end();",
      "} else {",
      "  res.statusCode = 200;",
      "  res.end(file);",
      "}"
    ]
  },
  "no-store-sw": {
    "scope": "javascript,typescript",
    "prefix": ["no-store-sw"],
    "body": [
      "const NO_STORE = [\"/sw.js\"];",
      "",
      "if (NO_STORE.includes(url.pathname)) {",
      "	res.setHeader(\"Cache-Control\", \"no-cache, no-store\");",
      "} else {",
      "	// ...",
      "}"
    ]
  },
  "sw-register": {
    "scope": "javascript,typescript,astro",
    "prefix": ["sw-register", "register", "service-worker-register"],
    "body": [
      "if (\"serviceWorker\" in navigator) {",
      "	navigator.serviceWorker.register(\"/sw.js\").then(() => {",
      "		console.log(\"Service Worker registered.\");",
      "	});",
      "}"
    ]
  },
  "sw-install": {
    "scope": "javascript,typescript",
    "prefix": [
      "sw-install",
      "install",
      "service-worker-install",
      "listener-install"
    ],
    "body": [
      "self.addEventListener(\"install\", (event) => {",
      "  event.waitUntil(",
      "		caches.open(CACHE_NAME).then((cache) => {",
      "			return cache.addAll(ASSETS);",
      "		})",
      "	);",
      "",
      "	console.log(\"Installed service worker, skipping waiting...\");",
      "	self.skipWaiting();",
      "});"
    ]
  },
  "cache-only": {
    "scope": "javascript,typescript",
    "prefix": ["strategy-cache-only", "cache-only"],
    "body": [
      "function cacheOnly(event) {",
      "	return caches.match(event.request).then((cachedResponse) => {",
      "		return cachedResponse || fetch(event.request);",
      "	});",
      "}"
    ]
  },
  "fetch-event": {
    "scope": "javascript,typescript",
    "prefix": ["fetch", "sw-fetch", "listener-fetch"],
    "body": [
      "self.addEventListener(\"fetch\", (event) => {",
      "	let response = cacheOnly(event);",
      "",
      "	event.respondWith(response);",
      "});"
    ]
  },
  "stale-while-revalidate": {
    "scope": "javascript,typescript",
    "prefix": ["strategy-swr", "swr", "stale-while-revalidate"],
    "body": [
      "function staleWhileRevalidate(event) {",
      "	return caches.match(event.request).then((cachedResponse) => {",
      "		const networkFetch = fetch(event.request)",
      "			.then((response) => {",
      "				const clonedResponse = response.clone();",
      "",
      "				caches.open(CACHE_NAME).then((cache) => {",
      "					cache.put(event.request, clonedResponse);",
      "				});",
      "",
      "				return response;",
      "			})",
      "			.catch(function (reason) {",
      "				console.error(`Could not revalidate ${event.request.url}: `, reason);",
      "			});",
      "",
      "		return cachedResponse || networkFetch;",
      "	});",
      "}"
    ]
  },
  "network-first": {
    "scope": "javascript,typescript",
    "prefix": [
      "strategy-network-first",
      "network-first",
      "hn-strategy",
      "hacker-news-strategy"
    ],
    "body": [
      "function networkFirst(event) {",
      "	return caches.match(event.request).then((cachedResponse) => {",
      "		const networkResponse = fetch(event.request)",
      "			.then((response) => {",
      "				const cloned = response.clone();",
      "				",
      "				caches.open(CACHE_NAME).then((cache) => {",
      "					cache.put(event.request, cloned);",
      "				});",
      "				",
      "				return response;",
      "			})",
      "			.catch(() => {",
      "				console.log(",
      "					`Could not serve ${event.request.url} from network, serving from cache`",
      "				);",
      "				",
      "				return cachedResponse;",
      "			});",
      "			",
      "		return networkResponse || cachedResponse;",
      "	});",
      "}"
    ]
  },
  "fetch-event-v2": {
    "scope": "javascript,typescript",
    "prefix": ["fetch-v2", "apply-strategies"],
    "body": [
      "const url = new URL(event.request.url);",
      "",
      "if (url.origin.includes(\"hacker-news\")) {",
      "	response = networkFirst(event);",
      "} else if (ASSETS.includes(url.pathname)) {",
      "	response = staleWhileRevalidate(event);",
      "} else {",
      "  return;",
      "}"
    ]
  },
  "post-message": {
    "scope": "javascript,typescript",
    "prefix": ["postMessage", "sw-post-message"],
    "body": [
      "async function postMessage(message) {",
      "	const clients = await self.clients.matchAll({ type: \"window\" });",
      "	for (const client of clients) {",
      "		client.postMessage(message);",
      "	}",
      "}",
      "",
      "// TODO: add in strategies catch callbacks",
      "postMessage(\"OFFLINE\");"
    ]
  },
  "on-message-listener": {
    "scope": "javascript,typescript,astro",
    "prefix": ["on-message-listener", "sw-listener-message", "onmessage"],
    "body": [
      "navigator.serviceWorker.onmessage = (event) => {",
      "	if (event.data === \"OFFLINE\") {",
      "		document.getElementById(\"offline-warning\").classList.remove(\"hidden\");",
      "	}",
      "};"
    ]
  },
  "import-idb": {
    "scope": "javascript,typescript",
    "prefix": ["import-idb", "idb", "importScripts"],
    "body": [
      "importScripts(\"https://cdn.jsdelivr.net/npm/idb-keyval@6/dist/umd.js\");"
    ]
  },
  "store-get-submissions": {
    "scope": "javascript,typescript",
    "prefix": ["submissions", "store-get-submissions", "sw-idb-submissions"],
    "body": [
      "function storeSubmission(event) {",
      "	return event.request",
      "		.json()",
      "		.then((story) => {",
      "			return idbKeyval.update(\"submissions\", (submissions) =>",
      "				submissions ? [...submissions, story] : [story]",
      "			);",
      "		})",
      "		.then(() => new Response(undefined, { status: 201 }));",
      "}",
      "",
      "function getSubmissions() {",
      "	return idbKeyval",
      "		.get(\"submissions\")",
      "		.then((stories) => new Response(JSON.stringify(stories ?? [])));",
      "}"
    ]
  },
  "sw-submissions-fetch-handlers": {
    "scope": "javascript,typescript",
    "prefix": ["sw-handler-submissions", "fetch-submissions-handlers"],
    "body": [
      "if (url.pathname === \"/submit.json\") {",
      "	response = storeSubmission(event);",
      "} else if (url.pathname === \"/submissions.json\") {",
      "	response = getSubmissions();",
      "} else"
    ]
  }
}
